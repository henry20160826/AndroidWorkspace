package com.hu.DBoperator;

import java.util.List;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

import com.hu.DataClass.Student;

public class DatabaseManager {
	private DatabaseHelper helper;
	private SQLiteDatabase db;

	public DatabaseManager(Context context) {
		helper = new DatabaseHelper(context);
		// 因为getWritableDatabase内部调用了mContext.openOrCreateDatabase(mName, 0,
		// mFactory);
		// 所以要确保context已初始化,我们可以把实例化DBManager的步骤放在Activity的onCreate里
		db = helper.getWritableDatabase();
	}

	public void addStudent(List<Student> students) throws Exception {
		db.beginTransaction(); // 开始事务
		try {
			for (Student student : students) {
				db.execSQL("INSERT INTO student VALUES(?,?,?,?,?,?,?)",
						new Object[] { student.sid, student.name,
								student.phone, student.classPost,
								student.schoolPost, student.politicalStatus,
								student.PartyClass });
			}
			db.setTransactionSuccessful(); // 设置事务成功完成
		} catch (Exception e) {
			db.endTransaction(); // 结束事务
			System.out.println("插入信息错误");
			throw e;
			// TODO: handle exception
		} finally {
			db.endTransaction(); // 结束事务
		}
	}

	public void addStudent(Student student) {
		db.execSQL("INSERT INTO student VALUES(?,?,?,?,?,?,?)",
				new Object[] { student.sid, student.name, student.phone,
						student.classPost, student.schoolPost,
						student.politicalStatus, student.PartyClass });
	}

	public void update(Student student) {
		ContentValues cv = new ContentValues();
		cv.put("name", student.name);
		cv.put("phone", student.phone);
		cv.put("classPost", student.classPost);
		cv.put("schoolPost", student.schoolPost);
		cv.put("politicalStatus", student.politicalStatus);
		cv.put("PartyClass", student.PartyClass);
		db.update("student", cv, "sid=?", new String[] { student.sid });
	}

	public void updateSid(String oString, String nString) {
		ContentValues cv = new ContentValues();
		cv.put("sid", nString);
		db.update("student", cv, "sid=?", new String[] { oString });
	}

	public Cursor queryTheCursor(String s) {
		Cursor cursor = db.rawQuery("SELECT * FROM " + s, null);
		return cursor;
	}

	public Student queryStudent(String sid) {
		ContentValues contentValues=new ContentValues();
		contentValues.put("sid", sid);
		Cursor cursor = db.rawQuery("SELECT * FROM student where sid = ?", contentValues);
		Student student = new Student(cursor);
		return student;
	}

	public void deleteStudent(String sid) {
		db.delete("student", "sid=?", new String[] { sid });
	}

	/**
	 * close database
	 */
	public void closeDB() {
		db.close();
	}
}
