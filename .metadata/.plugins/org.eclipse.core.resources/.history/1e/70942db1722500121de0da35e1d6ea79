package hu.Ktable;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Calendar;
import java.util.Locale;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

import android.app.Activity;
import android.content.ContentValues;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.os.Environment;
import android.view.GestureDetector;
import android.view.GestureDetector.OnGestureListener;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.Window;
import android.view.WindowManager;
import android.view.animation.AnimationUtils;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ViewFlipper;

public class KtableActivity extends Activity implements OnGestureListener {

	private GestureDetector detector;
	private ViewFlipper filpper;
	private Calendar calendar;
	private String[][] ke;
	private String[] wek;
	private int x, num, before;
	private TextView week1, week2;
	private TextView clas11, clas12, clas13, clas14, clas15, clas16, clas21,
			clas22, clas23, clas24, clas25, clas26;
	private DatabaseHelper dbhelper;
	private SQLiteDatabase dbW;
	boolean first = true, page = true;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		requestWindowFeature(Window.FEATURE_NO_TITLE);// 隐藏标题
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				WindowManager.LayoutParams.FLAG_FULLSCREEN);// 设置全屏
		super.onCreate(savedInstanceState);

		dbhelper = new DatabaseHelper(KtableActivity.this, "user", null, 1);
		dbW = dbhelper.getWritableDatabase();
		num = dbhelper.readstyle(dbW);
		if (num != 4) {
			set();
			detector = new GestureDetector(this);
			wek = getResources().getStringArray(R.array.week);
			getItem();
			ke = new String[5][6];
			Locale.setDefault(Locale.CHINA);
			calendar = Calendar.getInstance();
			x = calendar.get(calendar.DAY_OF_WEEK);
			x -= 2;
			if (x > 4 || x < 0) {
				x = 0;
			}
			// ke=getResources().getStringArray(R.array.clas);
			// 读取文件***************************************************************************************
			// read();
			// 显示部分***************************************************************************************
			write();
		} else {
			set();
		}
		readExcel();
	}

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if (false == first) {
			num = dbhelper.readstyle(dbW);
			if (4 != num) {
				set();
				getItem();
				write();
			} else {

			}
		}
	}

	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
		first = false;
	}

	// 4全局模式
	// 0 默认皮肤
	// 1 黑色炫酷
	// 2 绿色雨林
	// 3 蓝色海洋
	private void set() {
		switch (num) {
		case 1:// 粉色女生
			setContentView(R.layout.k_pink);
			filpper = (ViewFlipper) findViewById(R.id.ViewFlipper00);
			break;
		case 2:// 绿色雨后
			setContentView(R.layout.k_green);
			filpper = (ViewFlipper) findViewById(R.id.ViewFlipper00);
			break;
		case 3:// 蓝色雨滴
			setContentView(R.layout.k_blue);
			filpper = (ViewFlipper) findViewById(R.id.ViewFlipper00);
			break;
		case 4:
			setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
			setContentView(R.layout.quaju);
			break;
		default:// 默认皮肤
			setContentView(R.layout.k_shuimo);
			filpper = (ViewFlipper) findViewById(R.id.ViewFlipper00);
			break;
		}
	}

	private void getItem() {
		week1 = (TextView) findViewById(R.id.week1);
		clas11 = (TextView) findViewById(R.id.clas11);
		clas12 = (TextView) findViewById(R.id.clas12);
		clas13 = (TextView) findViewById(R.id.clas13);
		clas14 = (TextView) findViewById(R.id.clas14);
		clas15 = (TextView) findViewById(R.id.clas15);
		clas16 = (TextView) findViewById(R.id.clas16);
		week2 = (TextView) findViewById(R.id.week2);
		clas21 = (TextView) findViewById(R.id.clas21);
		clas22 = (TextView) findViewById(R.id.clas22);
		clas23 = (TextView) findViewById(R.id.clas23);
		clas24 = (TextView) findViewById(R.id.clas24);
		clas25 = (TextView) findViewById(R.id.clas25);
		clas26 = (TextView) findViewById(R.id.clas26);
	}

	// private void read() {
	// int ai = 0, j = 0, k;
	// boolean hasSD = false;
	// String SDPath;
	// BufferedReader reader = null;
	// try {
	// hasSD = Environment.getExternalStorageState().equals(
	// android.os.Environment.MEDIA_MOUNTED);
	// if (false == hasSD) {
	// ke[x][0] = ("找不到SD卡");
	// } else {
	//
	// SDPath = Environment.getExternalStorageDirectory().getPath();
	// // ke[x][0]=SDPath;
	// File file = new File(SDPath + "//kebiao.txt");
	// FileInputStream fis = new FileInputStream(file);
	// BufferedInputStream in = new BufferedInputStream(fis);
	// reader = new BufferedReader(new InputStreamReader(in, "GBK"));
	// String data = null;
	// for (ai = 0; ai < 5; ai++) {
	// for (j = 0; j < 6; j++) {
	// for (k = 0; k < 2; k++) {
	// data = reader.readLine();
	// if (0 == k && data.equals("")) {
	// break;
	// } else {
	// if (0 == k) {
	// ke[ai][j] = data;
	// } else {
	// ke[ai][j] += "\n" + data;
	// }
	// }
	// }
	// }
	// }
	// reader.close();
	// }
	// } catch (FileNotFoundException e) {
	// ke[x][0] += ("文件打开失败" + e);
	// return;
	// } catch (IOException e) {
	// ke[x][0] += ("文件读取异常" + e);
	// return;
	// }
	// }

	public void readExcel() {
		try {
			boolean hasSD = false;
			String SDPath;
			/**
			 * 后续考虑问题,比如Excel里面的图片以及其他数据类型的读取
			 **/
			hasSD = Environment.getExternalStorageState().equals(
					android.os.Environment.MEDIA_MOUNTED);
			SDPath = Environment.getExternalStorageDirectory().getPath();
			File file = new File(SDPath + "//kebiao.xls");
			InputStream is = new FileInputStream(file);

			HSSFWorkbook book = new HSSFWorkbook(is);
			book.getNumberOfSheets();
			// 获得第一个工作表对象
			Sheet sheet = book.getSheetAt(0);
			int Rows = sheet.getLastRowNum();
			int Cols = 8;
			System.out.println("总行数:" + Rows);
			System.out.println("总列数:" + Cols);
			for (int i = 0; i < Cols; i++) {
				for (int j = 0; j < Rows; j++) {
					// getCell(Col,Row)获得单元格的值
					System.out.println(sheet.getRow(j).getCell(i).getStringCellValue()+"null");
				}
				System.out.print("\n");
			}
			// 得到第一列第一行的单元格
			is.close();
		} catch (Exception e) {
			System.out.println(e);
		}
	}

	private void write() {
		if (true == page) {
			week1.setText(wek[x]);
			clas11.setText(ke[x][0]);
			clas12.setText(ke[x][1]);
			clas13.setText(ke[x][2]);
			clas14.setText(ke[x][3]);
			clas15.setText(ke[x][4]);
			clas16.setText(ke[x][5]);
		} else {
			week2.setText(wek[x]);
			clas21.setText(ke[x][0]);
			clas22.setText(ke[x][1]);
			clas23.setText(ke[x][2]);
			clas24.setText(ke[x][3]);
			clas25.setText(ke[x][4]);
			clas26.setText(ke[x][5]);
		}
	}

	public boolean onDown(MotionEvent arg0) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,
			float velocityY) {
		// TODO Auto-generated method stub
		if (e1.getX() - e2.getX() > 120) {
			x++;
			if (x > 4) {
				x = 0;
			}
			page = !page;
			write();
			filpper.setInAnimation(AnimationUtils.loadAnimation(this,
					R.anim.turnpage_right_in));
			filpper.setOutAnimation(AnimationUtils.loadAnimation(this,
					R.anim.turnpage_left_out));
			filpper.showNext();
		} else if (e1.getX() - e2.getX() < -120) {
			x--;
			if (x < 0) {
				x = 4;
			}
			page = !page;
			write();
			filpper.setInAnimation(AnimationUtils.loadAnimation(this,
					R.anim.turnpage_left_in));
			filpper.setOutAnimation(AnimationUtils.loadAnimation(this,
					R.anim.turnpage_right_out));
			filpper.showPrevious();
		}
		return true;
	}

	@Override
	public void onLongPress(MotionEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX,
			float distanceY) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void onShowPress(MotionEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public boolean onSingleTapUp(MotionEvent e) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean onTouchEvent(MotionEvent event) {
		return this.detector.onTouchEvent(event);
	}

	public boolean onCreateOptionsMenu(Menu menu) {
		MenuInflater a = getMenuInflater();
		a.inflate(R.menu.menu, menu);
		return true;
	}

	public boolean onOptionsItemSelected(MenuItem Item) {
		Intent open = new Intent();
		switch (Item.getItemId()) {
		case R.id.about:
			open.setClass(KtableActivity.this, about.class);
			startActivity(open);
			Toast.makeText(this, "打开关于", Toast.LENGTH_LONG).show();
			break;
		case R.id.help:
			open.setClass(KtableActivity.this, help.class);
			startActivity(open);
			Toast.makeText(this, "打开帮助", Toast.LENGTH_LONG).show();
			break;
		case R.id.set:
			open.setClass(KtableActivity.this, set.class);
			startActivity(open);
			Toast.makeText(this, "打开设置", Toast.LENGTH_LONG).show();
			break;
		case R.id.model:
			if (num != 4) {
				before = num;
				num = 4;
				ContentValues b = new ContentValues();
				b.put("data", 4);
				dbW.update("user", b, "id=?", new String[] { "4" });
				set();
			} else {
				num = before;
				ContentValues b = new ContentValues();
				b.put("data", before);
				dbW.update("user", b, "id=?", new String[] { "before" });
			}
			break;
		default:
			Toast.makeText(this, "未知错误", Toast.LENGTH_LONG).show();
			break;

		}
		return true;
	}

	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
		dbW.close();
	}

}
